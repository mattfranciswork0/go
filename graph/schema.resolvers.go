package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"os"

	"github.com/mattfranciswork0/go/db"
	"github.com/mattfranciswork0/go/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// CreateAlbum is the resolver for the createAlbum field.
func (r *mutationResolver) CreateAlbum(ctx context.Context, title string, artist string, price *float64) (*model.Album, error) {
	albums, err := db.CreateAlbum(ctx, title, artist, 11.1)
	fmt.Println("Albums", albums)
	if err != nil {
		return nil, err
	}
	fmt.Fprintf(os.Stdout, "Album!!: %+v\n", &model.Album{
		Title:  title,
		Artist: artist,
		Price:  11.1,
	})

	return &model.Album{
		Title:  title,
		Artist: artist,
		Price:  11.1,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Albums is the resolver for the albums field.
func (r *queryResolver) Albums(ctx context.Context) ([]*model.Album, error) {
	albums, err := db.GetAlbums(ctx)

	if err != nil {
		return nil, err
	}

	var gqlAlbums []*model.Album
	for _, u := range albums {
		gqlAlbums = append(gqlAlbums, &model.Album{
			ID: u.ID,
		})
	}

	return gqlAlbums, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
